/* eslint-disable no-shadow */
import './WeeklyProjectSummary.css';
import { useSelector } from 'react-redux';
import { v4 as uuidv4 } from 'uuid';
import { useState } from 'react';
import WeeklyProjectSummaryHeader from './WeeklyProjectSummaryHeader';

function FinancialCard({ title, value, monthOverMonth, additionalInfo = {} }) {
  const [showTooltip, setShowTooltip] = useState(false);

  // Determine color and background based on percentage change
  const getColorScheme = percentage => {
    if (percentage > 0) return 'positive';
    if (percentage < 0) return 'negative';
    return 'neutral';
  };

  const colorScheme = getColorScheme(monthOverMonth);

  const titleClass = title.replace(/\s+/g, '-').toLowerCase();


  // Updated background and border colors to match the image
  const backgroundColors = {
    'Total Project Cost': {
      card: '#ECF3FF',
      ellipse: '#CBCBFE',
    },
    'Total Material Cost': {
      card: '#E0F7FA',
      ellipse: '#C1EFFB', // Darker teal variant
    },
    'Total Labor Cost': {
      card: '#FEE5F0',
      ellipse: '#FECFF3', // Darker pink variant
    },
    'Total Equipment Cost': {
      card: '#E6F5E9',
      ellipse: '#BAF0B6', // Darker green variant
    },
  };

  return (
    <div
      className={`financial-card ${colorScheme}   financial-card-background-${titleClass}`}
      style={{
        boxShadow: '0px 6px 15px rgba(0, 0, 0, 0.08)',
        position: 'relative',
        zIndex: 1,
        borderRadius: '25px',
        cursor: 'default',
      }}
      onMouseEnter={() => setShowTooltip(true)}
      onMouseLeave={() => setShowTooltip(false)}
    >
      <div className="financial-card-title">{title}</div>
      <div
        className="financial-card-ellipse"
        style={{
          background: backgroundColors[title].ellipse,
        }}
      />
      <div className="financial-card-value">{value.toLocaleString()}</div>
      <div className={`financial-card-month-over-month ${colorScheme}`}>
        {monthOverMonth > 0 ? '+' : ''}
        {monthOverMonth}% month over month
      </div>

      {/* Tooltip for Additional Information */}
      {showTooltip && Object.keys(additionalInfo).length > 0 && (
        <div className="financial-card-tooltip">
          {Object.entries(additionalInfo).map(([key, value]) => (
            <div key={key} className="financial-card-tooltip-item">
              <span className="tooltip-key">{key}:</span>
              <span className="tooltip-value">{value}</span>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

function WeeklyProjectSummary() {
  const [openSections, setOpenSections] = useState({});
  const darkMode = useSelector(state => state.theme.darkMode);

  const toggleSection = category => {
    setOpenSections(prev => ({
      ...prev,
      [category]: !prev[category],
    }));
  };

  // Simulated backend data - would typically come from an API or Redux store
  const financialData = [
    {
      id: uuidv4(),
      title: 'Total Project Cost',
      value: 572000,
      monthOverMonth: 3,
      totalUsers: 2854,
      additionalInfo: {
        'Budget Utilization': '72%',
        Forecast: 'On Track',
      },
    },
    {
      id: uuidv4(),
      title: 'Total Material Cost',
      value: 230000,
      monthOverMonth: 14,
      totalUsers: 1205,
      additionalInfo: {
        'Inventory Cost': '$45,000',
        Suppliers: '12',
      },
    },
    {
      id: uuidv4(),
      title: 'Total Labor Cost',
      value: 187000,
      monthOverMonth: -18,
      totalUsers: 876,
      additionalInfo: {
        'Overtime Hours': '124',
        'Team Efficiency': 'Needs Review',
      },
    },
    {
      id: uuidv4(),
      title: 'Total Equipment Cost',
      value: 155000,
      monthOverMonth: 16,
      totalUsers: 543,
      additionalInfo: {
        'Equipment Utilization': '85%',
        'Maintenance Cost': '$12,500',
      },
    },
  ];

  const sections = [
    {
      title: 'Project Status',
      key: 'Project Status',
      className: 'full',
      content: (
        <div className="project-status-grid">
          {Array.from({ length: 12 }).map(() => {
            const uniqueId = uuidv4();
            return (
              <div key={uniqueId} className="weekly-project-summary-card small-card">
                ðŸ“Š Card
              </div>
            );
          })}
        </div>
      ),
    },
    {
      title: 'Material Consumption',
      key: 'Material Consumption',
      className: 'large',
      content: [1, 2, 3].map(() => {
        const uniqueId = uuidv4();
        return (
          <div key={uniqueId} className="weekly-project-summary-card normal-card">
            ðŸ“Š Card
          </div>
        );
      }),
    },
    {
      title: 'Issue Tracking',
      key: 'Issue Tracking',
      className: 'small',
      content: <div className="weekly-project-summary-card normal-card">ðŸ“Š Card</div>,
    },
    {
      title: 'Tools and Equipment Tracking',
      key: 'Tools and Equipment Tracking',
      className: 'half',
      content: [1, 2].map(() => {
        const uniqueId = uuidv4();
        return (
          <div key={uniqueId} className="weekly-project-summary-card normal-card">
            ðŸ“Š Card
          </div>
        );
      }),
    },
    {
      title: 'Lessons Learned',
      key: 'Lessons Learned',
      className: 'half',
      content: [1, 2].map(() => {
        const uniqueId = uuidv4();
        return (
          <div key={uniqueId} className="weekly-project-summary-card normal-card">
            ðŸ“Š Card
          </div>
        );
      }),
    },
    {
      title: 'Financials',
      key: 'Financials',
      className: 'large',
      content: (
        <div className="financial-cards-container">
          {financialData.map(card => (
            // eslint-disable-next-line react/jsx-props-no-spreading
            <FinancialCard key={card.id} {...card} />
          ))}
          <div className="weekly-project-summary-card financial-big">
            ðŸ“Š Comprehensive Financial Overview
          </div>
        </div>
      ),
    },
    {
      title: 'Loss Tracking',
      key: 'Loss Tracking',
      className: 'small',
      content: <div className="weekly-project-summary-card normal-card">ðŸ“Š Card</div>,
    },
    {
      title: 'Global Distribution and Project Status',
      key: 'Global Distribution and Project Status',
      className: 'half',
      content: (
        <>
          <div className="weekly-project-summary-card wide-card">ðŸ“Š Wide Card</div>
          <div className="weekly-project-summary-card normal-card">ðŸ“Š Normal Card</div>
        </>
      ),
    },
    {
      title: 'Labor and Time Tracking',
      key: 'Labor and Time Tracking',
      className: 'half',
      content: [1, 2].map(() => {
        const uniqueId = uuidv4();
        return (
          <div key={uniqueId} className="weekly-project-summary-card normal-card">
            ðŸ“Š Card
          </div>
        );
      }),
    },
  ];

  return (
    <div className={`weekly-project-summary-container ${darkMode ? 'dark-mode' : ''}`}>
      <WeeklyProjectSummaryHeader />
      <div className="weekly-project-summary-dashboard-container">
        <div className="weekly-project-summary-dashboard-grid">
          {sections.map(({ title, key, className, content }) => (
            <div key={key} className={`weekly-project-summary-dashboard-section ${className}`}>
              <div
                className="weekly-project-summary-dashboard-category-title"
                onClick={() => toggleSection(key)}
              >
                {title}{' '}
                <span className="weekly-project-summary-dropdown-icon">
                  {openSections[key] ? 'âˆ§' : 'âˆ¨'}
                </span>
              </div>
              {openSections[key] && (
                <div className="weekly-project-summary-dashboard-category-content">{content}</div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default WeeklyProjectSummary;


